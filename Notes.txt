gcc -ggdb main.c -o main_with_DEBUG (compile binary with GDB debugging symbols)

Debug Symbol Files:

gdb ./SGDE-video2_DEBUG
(gdb) list
(gdb) Info functions
(gdb) Info variables (not local variables)
(gdb) Info scope function_name
(gdb) Info sources
(gdb) maint print symbols filename_to_store

Ripping Debug Symbols off a binary:

objcopy --only-keep-debug SGDE-video-2_DEBUG DEBUG_symbols (symbols ripped and saved to a new file)

Stripping Debug Symbols off a binary:

strip --strip-debug SGDE-video-2_DEBUG (symbols stripped off the binary)
strip --strip-debug --strip-unneeded SGDE-video-2_DEBUG (additional non-essential symbols stripped off the binary)

Adding Debug Symbols to a binary:

objcopy --add-gnu-debuglink=DEBUG_symbols SGDE-video-2_NO_DEBUG (add it in the binary)
(gdb) symbol-file DEBUG_symbols (load the symbol file within GDB)

NM - List Symbols from Object Files:

nm ./SGDE-video-3
08048474 T AddNumbers (3 columns; Virtual Address | Symbol Type | Symbol Name)

Symbol Types:

A | Absolute Symbol
B | In the Unitialized Data Section (BSS)
D | In the Initialized Data Section 
N | Debugging Symbol
T | In the Text Section
U | Symbol Undefined right now
* Lower Case is Local Symbol
* Upper Case is External

NM Usage:

nm -a ./SGDE-video-3_DEBUG | grep main (Grep for function name)
nm -n ./SGDE-video-3_DEBUG (Display symbols in sorted order)
nm -g ./SGDE-video-3_DEBUG (External)
nm -S ./SGDE-video-3_DEBUG (Display size)

System Calling with Strace:

strace ./SGDE-video-4 20 30 (Tracing an execution's Syscalls)
strace -t ./SGDE-video-4 20 30 (Tracing an execution with absolute timestamps)
strace -r ./SGDE-video-4 20 30 (Tracing an execution with relative timestamps)
strace ./SGDE-video-4 20 30 -O Test (Tracing an execution and saving to output file)
strace -e open,socket,connect,recv nc google.com 80 (Tracing an execution and filtering Syscalls)
sudo strace -p process_id (Tracing an execution by attaching to a running process)
strace -c nc google.com 80 (Tracing an execution with statistics on Syscalls)

seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
100.00    0.000149           3        51           write

Breakpoints, Examining Registers and Memory:

Setting a Breakpoint in GDB:
- break functionb_name (break main)
- break address (break *0x080484cd)
- break line_number (break 30)

(gdb) break main
Breakpoint 1 at 0x80484bd: file SGDE-video-5.c, line 30.
(gdb) run test
Starting program: /SGDE-Files/video-5/video-5/video-5/SGDE-video-5_DEBUG test

Breakpoint 1, main (argc=2, argv=0xbffff694) at SGDE-video-5.c:30
30		EchoInput(argv[1]);
(gdb) info registers
eax            0x2	2
ecx            0xbffff694	-1073744236
edx            0xbffff624	-1073744348
ebx            0xb7fc6ff4	-1208193036
esp            0xbffff5e0	0xbffff5e0
ebp            0xbffff5f8	0xbffff5f8
esi            0x0	0
edi            0x0	0
eip            0x80484bd	0x80484bd <main+9>
eflags         0x282	[ SF IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) l         
25	
26	
27	int main(int argc, char **argv)
28	{
29	
30		EchoInput(argv[1]);
31	
32		return 0;
33	
34	}
(gdb) break EchoInput 
Breakpoint 2 at 0x8048470: file SGDE-video-5.c, line 16.
(gdb) info breakpoints 
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x080484bd in main at SGDE-video-5.c:30
	breakpoint already hit 1 time
2       breakpoint     keep y   0x08048470 in EchoInput at SGDE-video-5.c:16
(gdb) disable 1
(gdb) info breakpoints
Num     Type           Disp Enb Address    What
1       breakpoint     keep n   0x080484bd in main at SGDE-video-5.c:30
	breakpoint already hit 1 time
2       breakpoint     keep y   0x08048470 in EchoInput at SGDE-video-5.c:16
(gdb) enable 1
(gdb) info breakpoints
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x080484bd in main at SGDE-video-5.c:30
	breakpoint already hit 1 time
2       breakpoint     keep y   0x08048470 in EchoInput at SGDE-video-5.c:16
(gdb) delete 1
(gdb) info breakpoints
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x08048470 in EchoInput at SGDE-video-5.c:16
(gdb) help x
Examine memory: x/FMT ADDRESS.
ADDRESS is an expression for the memory address to examine.
FMT is a repeat count followed by a format letter and a size letter.
Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
  t(binary), f(float), a(address), i(instruction), c(char) and s(string).
Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.

Defaults for format and size letters are those previously used.
Default count is 1.  Default address is following last thing printed
with this command or "print".
(gdb) print argv[1] 
$1 = 0xbffff81e "test"
(gdb) print argv[0]
$2 = 0xbffff7c3 "/SGDE-Files/video-5/video-5/video-5/SGDE-video-5_DEBUG"
(gdb) x/s argv[1]
0xbffff81e:	 "test"
(gdb) x/s argv[0]
0xbffff7c3:	 "/SGDE-Files/video-5/video-5/video-5/SGDE-video-5_DEBUG"
(gdb) info registers
eax            0x2	2
ecx            0xbffff694	-1073744236
edx            0xbffff624	-1073744348
ebx            0xb7fc6ff4	-1208193036
esp            0xbffff5e0	0xbffff5e0
ebp            0xbffff5f8	0xbffff5f8
esi            0x0	0
edi            0x0	0
eip            0x80484bd	0x80484bd <main+9>
eflags         0x282	[ SF IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) disassemble main
Dump of assembler code for function main:
   0x080484b4 <+0>:	push   %ebp
   0x080484b5 <+1>:	mov    %esp,%ebp
   0x080484b7 <+3>:	and    $0xfffffff0,%esp
   0x080484ba <+6>:	sub    $0x10,%esp
=> 0x080484bd <+9>:	mov    0xc(%ebp),%eax
   0x080484c0 <+12>:	add    $0x4,%eax
   0x080484c3 <+15>:	mov    (%eax),%eax
   0x080484c5 <+17>:	mov    %eax,(%esp)
   0x080484c8 <+20>:	call   0x8048464 <EchoInput>
   0x080484cd <+25>:	mov    $0x0,%eax
   0x080484d2 <+30>:	leave  
   0x080484d3 <+31>:	ret    
End of assembler dump.
(gdb) x/i 0x80484bd
=> 0x80484bd <main+9>:	mov    0xc(%ebp),%eax
(gdb) x/10xw $esp
0xbffff5e0:	0xb7fed280	0x00000000	0x080484e9	0xb7fc6ff4
0xbffff5f0:	0x080484e0	0x00000000	0x00000000	0xb7e394e3
0xbffff600:	0x00000002	0xbffff694
(gdb) continue
Continuing.

Breakpoint 2, EchoInput (userInput=0xbffff81e "test") at SGDE-video-5.c:16
16	{
(gdb) stepi
0x08048476	16	{
(gdb) stepi
0x08048479	16	{
(gdb) step
20		strcpy(buffer, userInput);
(gdb) step
22		printf("\n\n%s\n\n", buffer);
(gdb) step


test

24	}
(gdb) help step
Step program until it reaches a different source line.
Argument N means do this N times (or till program stops for another reason).
(gdb) help stepi
Step one instruction exactly.
Argument N means do this N times (or till program stops for another reason).

Modifying Registers and Memory:

(gdb) break main
Breakpoint 1 at 0x8048579: file SGDE-video-6.c, line 46.
(gdb) run AAAA 10 20
Starting program: /SGDE-Files/video-6/video-6/video-6/SGDE-video-6 AAAA 10 20

Breakpoint 1, main (argc=4, argv=0xbffff694) at SGDE-video-6.c:46
46		int sum = 0;
(gdb) x/5c argv[1]
0xbffff81d:	65 'A'	65 'A'	65 'A'	65 'A'	0 '\000'
(gdb) set {char} 0xbffff81d = 'B'
(gdb) x/5c argv[1]
0xbffff81d:	66 'B'	65 'A'	65 'A'	65 'A'	0 '\000'
(gdb) set {char} 0xbffff81d = 67  
(gdb) x/5c argv[1]
0xbffff81d:	67 'C'	65 'A'	65 'A'	65 'A'	0 '\000'
(gdb) set {char} 0xbffff81d = 'B'
(gdb) set {char} ( 0xbffff81d +1 ) = 'B'
(gdb) set {char} ( 0xbffff81d +2 ) = 'B'
(gdb) set {char} ( 0xbffff81d +3 ) = 'B'
(gdb) x/5c argv[1]
0xbffff81d:	66 'B'	66 'B'	66 'B'	66 'B'	0 '\000'
(gdb) c
Continuing.


BBBB

Sum of 10 + 20 is 30

[Inferior 1 (process 9768) exited normally]
(gdb) l
47	
48		EchoInput(argv[1]);
49	
50		sum = AddNumbers(atoi(argv[2]), atoi(argv[3]));
51	
52		printf("Sum of %s + %s is %d\n\n", argv[2], argv[3], sum );
53	
54		return 0;
55	
56	}
(gdb) break 52
Breakpoint 2 at 0x80485c3: file SGDE-video-6.c, line 52.
(gdb) c
Continuing.


AAAA


Breakpoint 2, main (argc=4, argv=0xbffff694) at SGDE-video-6.c:52
52		printf("Sum of %s + %s is %d\n\n", argv[2], argv[3], sum );
(gdb) print sum
$1 = 30
(gdb) set sum = 2000
(gdb) c
Continuing.
Sum of 10 + 20 is 2000

[Inferior 1 (process 10398) exited normally]
(gdb) print FunctionShouldNotExecute 
$1 = {void (void)} 0x80484f4 <FunctionShouldNotExecute>
(gdb) run AAAA 10 20
Starting program: /SGDE-Files/video-6/video-6/video-6/SGDE-video-6 AAA 10 20

Breakpoint 1, main (argc=4, argv=0xbffff694) at SGDE-video-6.c:46
46		int sum = 0;
(gdb) info registers 
eax            0x4	4
ecx            0xbffff694	-1073744236
edx            0xbffff624	-1073744348
ebx            0xb7fc6ff4	-1208193036
esp            0xbffff5d0	0xbffff5d0
ebp            0xbffff5f8	0xbffff5f8
esi            0x0	0
edi            0x0	0
eip            0x8048579	0x8048579 <main+10>
eflags         0x282	[ SF IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) set $eip = 0x80484f4
(gdb) c
Continuing.


I should not execute!!!

[Inferior 1 (process 10826) exited normally]

Convenience Variables and Calling Routines:

(gdb) run AAA 10 20
Starting program: /SGDE-Files/video-7/video-7/video-7/SGDE-video-7 AAA 10 20

Breakpoint 1, main (argc=4, argv=0xbffff694) at SGDE-video-7.c:30
30		if (argc < 2 ) 
(gdb) set $dyn = (char *)malloc(10)
(gdb) print $dyn
$5 = 0x804b008 ""
(gdb) x/10xb $dyn
0x804b008:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x804b010:	0x00	0x00
(gdb) call strcpy($dyn, argv[1])
$6 = 134524936
(gdb) x/10xb $dyn
0x804b008:	0x41	0x41	0x41	0x00	0x00	0x00	0x00	0x00
0x804b010:	0x00	0x00
(gdb) x/10xc $dyn
0x804b008:	65 'A'	65 'A'	65 'A'	0 '\000'	0 '\000'	0 '\000'	0 '\000'	0 '\000'
0x804b010:	0 '\000'	0 '\000'
(gdb) set argv[1] = $dyn
(gdb) info functions
All defined functions:

File SGDE-video-7.c:
int ComparePasswords(char *, char *);
int main(int, char **);
(gdb) call ComparePasswords ("test","test")
(gdb) set $j = "test2" 
(gdb) set $i = "test2"
(gdb) call ComparePasswords ($i, $j)
$8 = 1
(gdb) call ComparePasswords("test","test")
$9 = 1

Cracking a Simple Binary with DEBUG Symbols:

gdb ./SGDE-video-8_DEBUG 
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /SGDE-Files/video-8/video-8/SGDE-video-8_DEBUG...done.
(gdb) info functions 
All defined functions:

File SGDE-video-8.c:
int IsPasswordCorrect(char *, char *);
void UnlockSecret(void);
int main(int, char **);
(gdb) break main
Breakpoint 1 at 0x80484c0: file SGDE-video-8.c, line 44.
(gdb) run demo 
Starting program: /SGDE-Files/video-8/video-8/SGDE-video-8_DEBUG demo

Breakpoint 1, main (argc=2, argv=0xbffff6a4) at SGDE-video-8.c:44
44	SGDE-video-8.c: No such file or directory.
(gdb) call UnlockSecret()
Secret code: 4832-3422-3421-9847
(gdb) break IsPasswordCorrect 
Breakpoint 2 at 0x804848e: file SGDE-video-8.c, line 29.
(gdb) c
Continuing.

Breakpoint 2, IsPasswordCorrect (password=0xbffff82d "demo", userInput=0x8048638 "l33tsp3ak")
    at SGDE-video-8.c:29
29	in SGDE-video-8.c
(gdb) print password
$3 = 0xbffff82d "demo"
(gdb) print userInput
$4 = 0x8048638 "l33tsp3ak"
(gdb) info scope IsPasswordCorrect 
Scope for IsPasswordCorrect:
Symbol password is a variable at frame base reg $esp offset 4+0, length 4.
Symbol userInput is a variable at frame base reg $esp offset 4+4, length 4.
Symbol result is a variable at frame base reg $esp offset 4+-20, length 4.

Disassembling and Cracking a Simple Binary:

gdb ./SGDE-video-9_DEBUG 
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /SGDE-Files/video-9/video-9/SGDE-video-9_DEBUG...done.
(gdb) set disassembly-flavor intel
(gdb) disassemble main
Dump of assembler code for function main:
   0x080484b7 <+0>:	push   ebp
   0x080484b8 <+1>:	mov    ebp,esp
   0x080484ba <+3>:	and    esp,0xfffffff0
   0x080484bd <+6>:	sub    esp,0x20
   0x080484c0 <+9>:	mov    DWORD PTR [esp+0x1c],0x0
   0x080484c8 <+17>:	cmp    DWORD PTR [ebp+0x8],0x1
   0x080484cc <+21>:	jg     0x80484f0 <main+57>
   0x080484ce <+23>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080484d1 <+26>:	mov    edx,DWORD PTR [eax]
   0x080484d3 <+28>:	mov    eax,0x8048622
   0x080484d8 <+33>:	mov    DWORD PTR [esp+0x4],edx
   0x080484dc <+37>:	mov    DWORD PTR [esp],eax
   0x080484df <+40>:	call   0x8048370 <printf@plt>
   0x080484e4 <+45>:	mov    DWORD PTR [esp],0x0
   0x080484eb <+52>:	call   0x80483a0 <exit@plt>
   0x080484f0 <+57>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080484f3 <+60>:	add    eax,0x4
   0x080484f6 <+63>:	mov    eax,DWORD PTR [eax]
   0x080484f8 <+65>:	mov    DWORD PTR [esp+0x4],0x8048638
   0x08048500 <+73>:	mov    DWORD PTR [esp],eax
   0x08048503 <+76>:	call   0x8048488 <IsPasswordCorrect>
   0x08048508 <+81>:	mov    DWORD PTR [esp+0x1c],eax
   0x0804850c <+85>:	cmp    DWORD PTR [esp+0x1c],0x1
   0x08048511 <+90>:	jne    0x804851a <main+99>
   0x08048513 <+92>:	call   0x8048474 <UnlockSecret>
   0x08048518 <+97>:	jmp    0x8048526 <main+111>
   0x0804851a <+99>:	mov    DWORD PTR [esp],0x8048640
   0x08048521 <+106>:	call   0x8048380 <puts@plt>
   0x08048526 <+111>:	mov    eax,0x0
   0x0804852b <+116>:	leave  
   0x0804852c <+117>:	ret    
End of assembler dump.
(gdb) break *0x08048508
Breakpoint 1 at 0x8048508: file SGDE-video-9.c, line 52.
(gdb) run aaaa
Starting program: /SGDE-Files/video-9/video-9/SGDE-video-9_DEBUG aaaa

Breakpoint 1, 0x08048508 in main (argc=2, argv=0xbffff6a4) at SGDE-video-9.c:52
52	SGDE-video-9.c: No such file or directory.
(gdb) disas $eip
Dump of assembler code for function main:
   0x080484b7 <+0>:	push   ebp
   0x080484b8 <+1>:	mov    ebp,esp
   0x080484ba <+3>:	and    esp,0xfffffff0
   0x080484bd <+6>:	sub    esp,0x20
   0x080484c0 <+9>:	mov    DWORD PTR [esp+0x1c],0x0
   0x080484c8 <+17>:	cmp    DWORD PTR [ebp+0x8],0x1
   0x080484cc <+21>:	jg     0x80484f0 <main+57>
   0x080484ce <+23>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080484d1 <+26>:	mov    edx,DWORD PTR [eax]
   0x080484d3 <+28>:	mov    eax,0x8048622
   0x080484d8 <+33>:	mov    DWORD PTR [esp+0x4],edx
   0x080484dc <+37>:	mov    DWORD PTR [esp],eax
   0x080484df <+40>:	call   0x8048370 <printf@plt>
   0x080484e4 <+45>:	mov    DWORD PTR [esp],0x0
   0x080484eb <+52>:	call   0x80483a0 <exit@plt>
   0x080484f0 <+57>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080484f3 <+60>:	add    eax,0x4
   0x080484f6 <+63>:	mov    eax,DWORD PTR [eax]
   0x080484f8 <+65>:	mov    DWORD PTR [esp+0x4],0x8048638
   0x08048500 <+73>:	mov    DWORD PTR [esp],eax
   0x08048503 <+76>:	call   0x8048488 <IsPasswordCorrect>
=> 0x08048508 <+81>:	mov    DWORD PTR [esp+0x1c],eax
   0x0804850c <+85>:	cmp    DWORD PTR [esp+0x1c],0x1
   0x08048511 <+90>:	jne    0x804851a <main+99>
   0x08048513 <+92>:	call   0x8048474 <UnlockSecret>
   0x08048518 <+97>:	jmp    0x8048526 <main+111>
   0x0804851a <+99>:	mov    DWORD PTR [esp],0x8048640
   0x08048521 <+106>:	call   0x8048380 <puts@plt>
   0x08048526 <+111>:	mov    eax,0x0
   0x0804852b <+116>:	leave  
   0x0804852c <+117>:	ret    
End of assembler dump.
(gdb) info registers
eax            0x0	0
ecx            0x9	9
edx            0xbffff82d	-1073743827
ebx            0xb7fc6ff4	-1208193036
esp            0xbffff5e0	0xbffff5e0
ebp            0xbffff608	0xbffff608
esi            0x0	0
edi            0x0	0
eip            0x8048508	0x8048508 <main+81>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) set $eax = 1
(gdb) info registers
eax            0x1	1
ecx            0x9	9
edx            0xbffff82d	-1073743827
ebx            0xb7fc6ff4	-1208193036
esp            0xbffff5e0	0xbffff5e0
ebp            0xbffff608	0xbffff608
esi            0x0	0
edi            0x0	0
eip            0x8048508	0x8048508 <main+81>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) stepi
54	in SGDE-video-9.c
(gdb) stepi
0x08048511	54	in SGDE-video-9.c
(gdb) disas $eip
Dump of assembler code for function main:
   0x080484b7 <+0>:	push   ebp
   0x080484b8 <+1>:	mov    ebp,esp
   0x080484ba <+3>:	and    esp,0xfffffff0
   0x080484bd <+6>:	sub    esp,0x20
   0x080484c0 <+9>:	mov    DWORD PTR [esp+0x1c],0x0
   0x080484c8 <+17>:	cmp    DWORD PTR [ebp+0x8],0x1
   0x080484cc <+21>:	jg     0x80484f0 <main+57>
   0x080484ce <+23>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080484d1 <+26>:	mov    edx,DWORD PTR [eax]
   0x080484d3 <+28>:	mov    eax,0x8048622
   0x080484d8 <+33>:	mov    DWORD PTR [esp+0x4],edx
   0x080484dc <+37>:	mov    DWORD PTR [esp],eax
   0x080484df <+40>:	call   0x8048370 <printf@plt>
   0x080484e4 <+45>:	mov    DWORD PTR [esp],0x0
   0x080484eb <+52>:	call   0x80483a0 <exit@plt>
   0x080484f0 <+57>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080484f3 <+60>:	add    eax,0x4
   0x080484f6 <+63>:	mov    eax,DWORD PTR [eax]
   0x080484f8 <+65>:	mov    DWORD PTR [esp+0x4],0x8048638
   0x08048500 <+73>:	mov    DWORD PTR [esp],eax
   0x08048503 <+76>:	call   0x8048488 <IsPasswordCorrect>
   0x08048508 <+81>:	mov    DWORD PTR [esp+0x1c],eax
   0x0804850c <+85>:	cmp    DWORD PTR [esp+0x1c],0x1
=> 0x08048511 <+90>:	jne    0x804851a <main+99>
   0x08048513 <+92>:	call   0x8048474 <UnlockSecret>
   0x08048518 <+97>:	jmp    0x8048526 <main+111>
   0x0804851a <+99>:	mov    DWORD PTR [esp],0x8048640
   0x08048521 <+106>:	call   0x8048380 <puts@plt>
   0x08048526 <+111>:	mov    eax,0x0
   0x0804852b <+116>:	leave  
   0x0804852c <+117>:	ret    
End of assembler dump.
(gdb) stepi
56	in SGDE-video-9.c
(gdb) disas $eip
Dump of assembler code for function main:
   0x080484b7 <+0>:	push   ebp
   0x080484b8 <+1>:	mov    ebp,esp
   0x080484ba <+3>:	and    esp,0xfffffff0
   0x080484bd <+6>:	sub    esp,0x20
   0x080484c0 <+9>:	mov    DWORD PTR [esp+0x1c],0x0
   0x080484c8 <+17>:	cmp    DWORD PTR [ebp+0x8],0x1
   0x080484cc <+21>:	jg     0x80484f0 <main+57>
   0x080484ce <+23>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080484d1 <+26>:	mov    edx,DWORD PTR [eax]
   0x080484d3 <+28>:	mov    eax,0x8048622
   0x080484d8 <+33>:	mov    DWORD PTR [esp+0x4],edx
   0x080484dc <+37>:	mov    DWORD PTR [esp],eax
   0x080484df <+40>:	call   0x8048370 <printf@plt>
   0x080484e4 <+45>:	mov    DWORD PTR [esp],0x0
   0x080484eb <+52>:	call   0x80483a0 <exit@plt>
   0x080484f0 <+57>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080484f3 <+60>:	add    eax,0x4
   0x080484f6 <+63>:	mov    eax,DWORD PTR [eax]
   0x080484f8 <+65>:	mov    DWORD PTR [esp+0x4],0x8048638
   0x08048500 <+73>:	mov    DWORD PTR [esp],eax
   0x08048503 <+76>:	call   0x8048488 <IsPasswordCorrect>
   0x08048508 <+81>:	mov    DWORD PTR [esp+0x1c],eax
   0x0804850c <+85>:	cmp    DWORD PTR [esp+0x1c],0x1
   0x08048511 <+90>:	jne    0x804851a <main+99>
=> 0x08048513 <+92>:	call   0x8048474 <UnlockSecret>
   0x08048518 <+97>:	jmp    0x8048526 <main+111>
   0x0804851a <+99>:	mov    DWORD PTR [esp],0x8048640
   0x08048521 <+106>:	call   0x8048380 <puts@plt>
   0x08048526 <+111>:	mov    eax,0x0
   0x0804852b <+116>:	leave  
   0x0804852c <+117>:	ret    
End of assembler dump.
(gdb) c
Continuing.
Secret code: 4832-3422-3421-9847

[Inferior 1 (process 21288) exited normally]

Conditional Breakpoints:

gdb ./main
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /SGDE-Files/Video-10/Video-10/video-10/main...done.
(gdb) l
1	#include<stdio.h>
2	
3	int main(int argc, char **argv)
4	{
5	
6		int counter = 10;
7	
8		while (counter--)
9		{
10			printf("%d\n", counter);
(gdb) break 10
Breakpoint 1 at 0x8048429: file main.c, line 10.
(gdb) l 1
1	#include<stdio.h>
2	
3	int main(int argc, char **argv)
4	{
5	
6		int counter = 10;
7	
8		while (counter--)
9		{
10			printf("%d\n", counter);
(gdb) condition 1 counter == 5
(gdb) info breakpoints
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x08048429 in main at main.c:10
	stop only if counter == 5
(gdb) run demopass
Starting program: /SGDE-Files/Video-10/Video-10/video-10/main demopass
9
8
7
6

Breakpoint 1, main (argc=2, argv=0xbffff6a4) at main.c:10
10			printf("%d\n", counter);
(gdb) print counter
$1 = 5

gdb ./main_nodebug 
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /SGDE-Files/Video-10/Video-10/video-10/main_nodebug...(no debugging symbols found)...done.
(gdb) disas main 
Dump of assembler code for function main:
   0x08048414 <+0>:	push   %ebp
   0x08048415 <+1>:	mov    %esp,%ebp
   0x08048417 <+3>:	push   %edi
   0x08048418 <+4>:	push   %esi
   0x08048419 <+5>:	and    $0xfffffff0,%esp
   0x0804841c <+8>:	sub    $0x20,%esp
   0x0804841f <+11>:	movl   $0xa,0x1c(%esp)
   0x08048427 <+19>:	jmp    0x804843e <main+42>
   0x08048429 <+21>:	mov    $0x8048580,%eax
   0x0804842e <+26>:	mov    0x1c(%esp),%edx
   0x08048432 <+30>:	mov    %edx,0x4(%esp)
   0x08048436 <+34>:	mov    %eax,(%esp)
   0x08048439 <+37>:	call   0x8048320 <printf@plt>
   0x0804843e <+42>:	cmpl   $0x0,0x1c(%esp)
   0x08048443 <+47>:	setne  %al
   0x08048446 <+50>:	subl   $0x1,0x1c(%esp)
   0x0804844b <+55>:	test   %al,%al
   0x0804844d <+57>:	jne    0x8048429 <main+21>
   0x0804844f <+59>:	mov    0xc(%ebp),%eax
   0x08048452 <+62>:	add    $0x4,%eax
   0x08048455 <+65>:	mov    (%eax),%eax
   0x08048457 <+67>:	mov    %eax,%edx
   0x08048459 <+69>:	mov    $0x8048584,%eax
   0x0804845e <+74>:	mov    $0x7,%ecx
   0x08048463 <+79>:	mov    %edx,%esi
   0x08048465 <+81>:	mov    %eax,%edi
   0x08048467 <+83>:	repz cmpsb %es:(%edi),%ds:(%esi)
   0x08048469 <+85>:	seta   %dl
   0x0804846c <+88>:	setb   %al
   0x0804846f <+91>:	mov    %edx,%ecx
   0x08048471 <+93>:	sub    %al,%cl
   0x08048473 <+95>:	mov    %ecx,%eax
   0x08048475 <+97>:	movsbl %al,%eax
   0x08048478 <+100>:	test   %eax,%eax
   0x0804847a <+102>:	jne    0x804848a <main+118>
   0x0804847c <+104>:	movl   $0x804858b,(%esp)
   0x08048483 <+111>:	call   0x8048330 <puts@plt>
   0x08048488 <+116>:	jmp    0x8048496 <main+130>
   0x0804848a <+118>:	movl   $0x804859e,(%esp)
   0x08048491 <+125>:	call   0x8048330 <puts@plt>
   0x08048496 <+130>:	mov    $0x0,%eax
   0x0804849b <+135>:	lea    -0x8(%ebp),%esp
   0x0804849e <+138>:	pop    %esi
   0x0804849f <+139>:	pop    %edi
   0x080484a0 <+140>:	pop    %ebp
   0x080484a1 <+141>:	ret    
End of assembler dump.
(gdb) break *0x08048478          
Breakpoint 1 at 0x8048478
(gdb) condition 1 $eax != 0
(gdb) info breakpoints 
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x08048478 <main+100>
	stop only if $eax != 0
(gdb) run demopass
Starting program: /SGDE-Files/Video-10/Video-10/video-10/main_nodebug demopass
9
8
7
6
5
4
3
2
1
0

Breakpoint 1, 0x08048478 in main ()
(gdb) print $eax
$1 = -1
(gdb) set $eax = 0
(gdb) c
Continuing.
Correct Password!

[Inferior 1 (process 22815) exited normally]
