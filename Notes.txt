gcc -ggdb main.c -o main_with_DEBUG (compile binary with GDB debugging symbols)

Debug Symbol Files:

gdb ./SGDE-video2_DEBUG
(gdb) list
(gdb) Info functions
(gdb) Info variables (not local variables)
(gdb) Info scope function_name
(gdb) Info sources
(gdb) maint print symbols filename_to_store

Ripping Debug Symbols off a binary:

objcopy --only-keep-debug SGDE-video-2_DEBUG DEBUG_symbols (symbols ripped and saved to a new file)

Stripping Debug Symbols off a binary:

strip --strip-debug SGDE-video-2_DEBUG (symbols stripped off the binary)
strip --strip-debug --strip-unneeded SGDE-video-2_DEBUG (additional non-essential symbols stripped off the binary)

Adding Debug Symbols to a binary:

objcopy --add-gnu-debuglink=DEBUG_symbols SGDE-video-2_NO_DEBUG (add it in the binary)
(gdb) symbol-file DEBUG_symbols (load the symbol file within GDB)

NM - List Symbols from Object Files:

nm ./SGDE-video-3
08048474 T AddNumbers (3 columns; Virtual Address | Symbol Type | Symbol Name)

Symbol Types:

A | Absolute Symbol
B | In the Unitialized Data Section (BSS)
D | In the Initialized Data Section 
N | Debugging Symbol
T | In the Text Section
U | Symbol Undefined right now
* Lower Case is Local Symbol
* Upper Case is External

NM Usage:

nm -a ./SGDE-video-3_DEBUG | grep main (Grep for function name)
nm -n ./SGDE-video-3_DEBUG (Display symbols in sorted order)
nm -g ./SGDE-video-3_DEBUG (External)
nm -S ./SGDE-video-3_DEBUG (Display size)

System Calling with Strace:

strace ./SGDE-video-4 20 30 (Tracing an execution's Syscalls)
strace -t ./SGDE-video-4 20 30 (Tracing an execution with absolute timestamps)
strace -r ./SGDE-video-4 20 30 (Tracing an execution with relative timestamps)
strace ./SGDE-video-4 20 30 -O Test (Tracing an execution and saving to output file)
strace -e open,socket,connect,recv nc google.com 80 (Tracing an execution and filtering Syscalls)
sudo strace -p process_id (Tracing an execution by attaching to a running process)
strace -c nc google.com 80 (Tracing an execution with statistics on Syscalls)

seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
100.00    0.000149           3        51           write

Breakpoints, Examining Registers and Memory:

Setting a Breakpoint in GDB:
- break functionb_name (break main)
- break address (break *0x080484cd)
- break line_number (break 30)

(gdb) break main
Breakpoint 1 at 0x80484bd: file SGDE-video-5.c, line 30.
(gdb) run test
Starting program: /SGDE-Files/video-5/video-5/video-5/SGDE-video-5_DEBUG test

Breakpoint 1, main (argc=2, argv=0xbffff694) at SGDE-video-5.c:30
30		EchoInput(argv[1]);
(gdb) info registers
eax            0x2	2
ecx            0xbffff694	-1073744236
edx            0xbffff624	-1073744348
ebx            0xb7fc6ff4	-1208193036
esp            0xbffff5e0	0xbffff5e0
ebp            0xbffff5f8	0xbffff5f8
esi            0x0	0
edi            0x0	0
eip            0x80484bd	0x80484bd <main+9>
eflags         0x282	[ SF IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) l         
25	
26	
27	int main(int argc, char **argv)
28	{
29	
30		EchoInput(argv[1]);
31	
32		return 0;
33	
34	}
(gdb) break EchoInput 
Breakpoint 2 at 0x8048470: file SGDE-video-5.c, line 16.
(gdb) info breakpoints 
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x080484bd in main at SGDE-video-5.c:30
	breakpoint already hit 1 time
2       breakpoint     keep y   0x08048470 in EchoInput at SGDE-video-5.c:16
(gdb) disable 1
(gdb) info breakpoints
Num     Type           Disp Enb Address    What
1       breakpoint     keep n   0x080484bd in main at SGDE-video-5.c:30
	breakpoint already hit 1 time
2       breakpoint     keep y   0x08048470 in EchoInput at SGDE-video-5.c:16
(gdb) enable 1
(gdb) info breakpoints
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x080484bd in main at SGDE-video-5.c:30
	breakpoint already hit 1 time
2       breakpoint     keep y   0x08048470 in EchoInput at SGDE-video-5.c:16
(gdb) delete 1
(gdb) info breakpoints
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x08048470 in EchoInput at SGDE-video-5.c:16
(gdb) help x
Examine memory: x/FMT ADDRESS.
ADDRESS is an expression for the memory address to examine.
FMT is a repeat count followed by a format letter and a size letter.
Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
  t(binary), f(float), a(address), i(instruction), c(char) and s(string).
Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.

Defaults for format and size letters are those previously used.
Default count is 1.  Default address is following last thing printed
with this command or "print".
(gdb) print argv[1] 
$1 = 0xbffff81e "test"
(gdb) print argv[0]
$2 = 0xbffff7c3 "/SGDE-Files/video-5/video-5/video-5/SGDE-video-5_DEBUG"
(gdb) x/s argv[1]
0xbffff81e:	 "test"
(gdb) x/s argv[0]
0xbffff7c3:	 "/SGDE-Files/video-5/video-5/video-5/SGDE-video-5_DEBUG"
(gdb) info registers
eax            0x2	2
ecx            0xbffff694	-1073744236
edx            0xbffff624	-1073744348
ebx            0xb7fc6ff4	-1208193036
esp            0xbffff5e0	0xbffff5e0
ebp            0xbffff5f8	0xbffff5f8
esi            0x0	0
edi            0x0	0
eip            0x80484bd	0x80484bd <main+9>
eflags         0x282	[ SF IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) disassemble main
Dump of assembler code for function main:
   0x080484b4 <+0>:	push   %ebp
   0x080484b5 <+1>:	mov    %esp,%ebp
   0x080484b7 <+3>:	and    $0xfffffff0,%esp
   0x080484ba <+6>:	sub    $0x10,%esp
=> 0x080484bd <+9>:	mov    0xc(%ebp),%eax
   0x080484c0 <+12>:	add    $0x4,%eax
   0x080484c3 <+15>:	mov    (%eax),%eax
   0x080484c5 <+17>:	mov    %eax,(%esp)
   0x080484c8 <+20>:	call   0x8048464 <EchoInput>
   0x080484cd <+25>:	mov    $0x0,%eax
   0x080484d2 <+30>:	leave  
   0x080484d3 <+31>:	ret    
End of assembler dump.
(gdb) x/i 0x80484bd
=> 0x80484bd <main+9>:	mov    0xc(%ebp),%eax
(gdb) x/10xw $esp
0xbffff5e0:	0xb7fed280	0x00000000	0x080484e9	0xb7fc6ff4
0xbffff5f0:	0x080484e0	0x00000000	0x00000000	0xb7e394e3
0xbffff600:	0x00000002	0xbffff694
(gdb) continue
Continuing.

Breakpoint 2, EchoInput (userInput=0xbffff81e "test") at SGDE-video-5.c:16
16	{
(gdb) stepi
0x08048476	16	{
(gdb) stepi
0x08048479	16	{
(gdb) step
20		strcpy(buffer, userInput);
(gdb) step
22		printf("\n\n%s\n\n", buffer);
(gdb) step


test

24	}
(gdb) help step
Step program until it reaches a different source line.
Argument N means do this N times (or till program stops for another reason).
(gdb) help stepi
Step one instruction exactly.
Argument N means do this N times (or till program stops for another reason).

Modifying Registers and Memory:

(gdb) break main
Breakpoint 1 at 0x8048579: file SGDE-video-6.c, line 46.
(gdb) run AAAA 10 20
Starting program: /home/osboxes/Downloads/GNU Debugger/SGDE-Files/video-6/video-6/video-6/SGDE-video-6 AAAA 10 20

Breakpoint 1, main (argc=4, argv=0xbffff694) at SGDE-video-6.c:46
46		int sum = 0;
(gdb) x/5c argv[1]
0xbffff81d:	65 'A'	65 'A'	65 'A'	65 'A'	0 '\000'
(gdb) set {char} 0xbffff81d = 'B'
(gdb) x/5c argv[1]
0xbffff81d:	66 'B'	65 'A'	65 'A'	65 'A'	0 '\000'
(gdb) set {char} 0xbffff81d = 67  
(gdb) x/5c argv[1]
0xbffff81d:	67 'C'	65 'A'	65 'A'	65 'A'	0 '\000'
(gdb) set {char} 0xbffff81d = 'B'
(gdb) set {char} ( 0xbffff81d +1 ) = 'B'
(gdb) set {char} ( 0xbffff81d +2 ) = 'B'
(gdb) set {char} ( 0xbffff81d +3 ) = 'B'
(gdb) x/5c argv[1]
0xbffff81d:	66 'B'	66 'B'	66 'B'	66 'B'	0 '\000'
(gdb) c
Continuing.


BBBB

Sum of 10 + 20 is 30

[Inferior 1 (process 9768) exited normally]
